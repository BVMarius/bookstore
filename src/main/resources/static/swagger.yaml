openapi: 3.0.1
info:
  title: OnlineLibrary
  version: '1.0'
servers:
  - url: 'http://localhost:8081'
tags:
  - name: profile
    description: Profile endpoint
  - name: book
    description: Endpoints related with books
  - name: customer
    description: Endpoints related with customers
  - name: author
    description: Endpoints related with authors
paths:
  '/api/customer/{userId}':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
        description: The id of the user
    patch:
      summary: 'Update User Information'
      operationId: patch-users-userId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRequest'
              examples:
                Updated User Rebecca Baker:
                  value:
                    id: a40860f8-d9c9-4c3b-b9cc-b87464601f11
                    firstName: Rebecca
                    lastName: Baker
                    email: rebecca@gmail.com
                    emailVerified: false
                    createDate: '2019-08-24'
        '404':
          description: User Not Found
        '409':
          description: Email Already Taken
      description: Update the information of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: 'If a new email is given, the user''s email verified property will be set to false.'
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
        description: Patch user properties to update.
      deprecated: true
      parameters: []
      tags:
        - customer
    delete:
      summary: ''
      operationId: delete-customer-userId
      responses:
        '200':
          description: OK
      tags:
        - customer
    put:
      summary: 'Update a customer by id'
      operationId: put-customer-userId
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
      parameters: []
      tags:
        - customer
    get:
      summary: 'Retrive a user by id'
      operationId: get-api-customer-userId
      responses:
        '200':
          description: OK
      parameters: []
      tags:
        - customer
  '/api/book/{bookId}':
    parameters:
      - schema:
          type: string
        name: bookId
        in: path
        required: true
    patch:
      summary: Update Book Information
      operationId: patch-api-book-bookId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRequest'
              examples:
                Updated User Rebecca Baker:
                  value:
                    id: a40860f8-d9c9-4c3b-b9cc-b87464601f11
                    firstName: Rebecca
                    lastName: Baker
                    email: rebecca@gmail.com
                    emailVerified: false
                    createDate: '2019-08-24'
        '401':
          description: Email Already Taken
        '404':
          description: User Not Found
      description: Update the information of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: 'If a new email is given, the user''s email verified property will be set to false.'
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
        description: Patch user properties to update.
      deprecated: true
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          required: true
      tags:
        - book
    delete:
      summary: ''
      operationId: delete-api-book-bookId
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          required: true
      tags:
        - book
    put:
      summary: ''
      operationId: put-api-book-bookId
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
      tags:
        - book
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          required: true
    get:
      summary: ''
      operationId: get-api-book-bookId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          required: true
      tags:
        - book
  /api/customer:
    parameters: []
    post:
      summary: 'Create a customer'
      operationId: create-customer
      responses:
        '201':
          description: Created
        '401':
          description: Unauthorized
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
            examples: {}
        description: ''
      tags:
        - customer
  /api/profile:
    parameters: []
    post:
      summary: ''
      operationId: post-profile
      responses:
        '201':
          description: Authorization response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Unauthorized
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      tags:
        - profile
  /api/book:
    parameters: []
    post:
      summary: 'Add a book to the application'
      operationId: post-book
      responses:
        '201':
          description: Created
        '401':
          description: Unauthorized
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
            examples: {}
        description: ''
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          required: true
      tags:
        - book
  /api/books:
    get:
      summary: Retrive all books
      tags:
        - book
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AListOfBooks'
      operationId: get-api-books
  /api/author:
    parameters: []
    post:
      summary: 'Add an author to the application'
      operationId: post-author
      responses:
        '201':
          description: Created
        '401':
          description: Unauthorized
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
            examples: {}
        description: ''
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          required: true
      tags:
        - author
components:
  schemas:
    UserRequest:
      title: User
      description: Description of an user
      example:
        id: string
        firstName: string
        lastName: string
        email: string
        userType: USER
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        userType:
          type: string
          enum:
            - user
            - admin
        password:
          type: string
    Book:
      title: Book
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
          enum:
            - FICTION
            - COMIC
            - ACTION
            - THRILLER
            - TECH
            - POETRY
            - DRAMA
            - OTHERS
        price:
          type: integer
        isbn:
          type: string
        authors:
          description: The book authors
          items:
            $ref: '#/components/schemas/Author'
          type: array
    Author:
      title: Author
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
    LoginRequest:
      title: Login data
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    LoginResponse:
      title: Authentification data
      type: object
      properties:
        token:
          type: string
        token-type:
          type: string
    AListOfBooks:
      properties:
        books:
          description: List of books
          items:
            $ref: '#/components/schemas/Book'
          type: array
      required:
        - books
      title: A list of books
      type: object
    NotFoundResponse:
      description: A not found error reponse
      properties:
        code:
          description: 'Specific error code'
          type: string
        detail:
          description: 'Error detail'
          type: string
      type: object
      title: NotFoundResponse
    ServiceUnavailableError:
      description: An error code when depended service is down
      properties:
        code:
          description: 'Specific error code'
          type: string
        detail:
          description: 'Error detail'
          type: string
      type: object
      title: ServiceUnavailableError
    UnauthorizedError:
      description: An error code when the client is not authorized to access the resource
      properties:
        code:
          description: 'Specific error code'
          type: string
        detail:
          description: 'Error detail'
          type: string
      type: object
      title: UnauthorizedError
    ValidationError:
      description: An error when
      example:
        code: invalid_type
        detail: is invalid
      properties:
        code:
          description: Code representing reason for error
          type: string
        detail:
          description: Error detail
          nullable: true
          type: string
      required:
        - code
      title: ValidationError
      type: object
